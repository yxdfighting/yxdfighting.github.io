{"meta":{"title":"yxdfighting","subtitle":null,"description":null,"author":"一头东哥","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"Unix IO","slug":"IO","date":"2017-08-21T01:32:47.323Z","updated":"2017-08-21T13:33:27.644Z","comments":true,"path":"2017/08/21/IO/","link":"","permalink":"http://yoursite.com/2017/08/21/IO/","excerpt":"","text":"##关于阻塞IO与非阻塞IO以read为例子，共分为两步：1、内核缓冲区数据准备好2、把数据从内核缓冲区复制到用户空间 阻塞IO主要是在调用read函数后，如果内核缓冲区数据还没有准备好，那么read函数不返回，一直阻塞。非阻塞IO在调用read函数后，如果内核缓冲区数据还没有准备好，那么read函数立即返回负值，如果要实现轮询，需要用户自己实现这部分逻辑。 同步IO和异步IO的主要区别是IO执行的主体不同，同步IO主要由用户自己实现IO，调用read，判断返回值，处理逻辑，所以上面所说的阻塞与非阻塞IO都是同步IO；而异步IO则不同，只需要用户调用read之后，剩余的工作交给内核，当内核缓冲区数据准备好之后，就会自己执行回调函数，完成工作。 多路IO复用，一个线程（进程）可以监听多个文件描述符，一旦某个描述符就绪(读事件或者写事件)，能够有这种机制可以通知程序进行读写操作，但select、poll、epoll本质上都是同步IO，因为整个读写操作都是在收到通知后用户自己执行的。 epoll、poll、select三者都能提供I/O多路复用的解决方案，在现在linux内核中都有支持，其中epoll是linux系统特有的，而select、poll是支持所有系统的。 selectselect函数监视的文件描述符有三类，分别是readfds、writefds、exceptfds，每个描述符存储在一个fd_set数据类型中int select(int maxfdp1,fd_set restrict readfds,fd_set restrict writefds,fd_set restrict exceptfds,struct tmeval restrict tvptr);返回值：准备就绪的描述符数目；若超时，返回0；出错返回-1需要对我们关心的fd进行设置，有一组四个函数进行设置，先对几个fd_set进行清零，然后可以对我们关心的描述符进行置位,select调用结束后，fd_isset查看相应为是否仍为1。select本质上是通过设置或者检查存放fd标志位的数据结构进行下一步处理。 1、单个进程能够监听的fd有限 2、本质上是对socket的扫描时轮询方式，即对fd_set中置位的socket进行遍历 3、需要维护一个存放fd的数组，并且轮询需要在内核中进行，而又需要将结果传回用户空间，所以在二者之间传递该结构时会造成较大的开销 pollpoll函数类似于select，只是接口有所不同。 int poll(struct pollfd fdarray[],nfds_t nfds,int timeout); struct pollfd{int fd;short event;short revents}; 每个数组元素指定一个描述符编号以及我们对该描述符感兴趣的条件，poll将用户传入的数组拷贝到内核空间，然后查询每个fd对应的设备状态，如果设备就绪则在设备等待队列中加入一项并继续遍历，如果遍历完所有fd后没有发现就绪设备，则挂起当前进程，直到设备就绪或者主动超时，被唤醒后它又要再次遍历fd。这个过程经历多次无谓的遍历。 它没有最大连接数的限制，原因是它基于链表存储的，但是同样有一个缺点： 存储大量fd的链表被整体复制与用户态和内核地址空间之间，不管这样的复制是不是有意义。 poll还有一个特点是“水平触发”，如果报告了fd之后，没有被处理，那么下次poll时还会再次报告该fd。 随着监视的描述符数量的增长，效率直线下降。 epollepoll精巧的使用了3个方法来实现select方法要做的事： 1.新建epoll描述符==epoll_create()2.epoll_ctrl(epoll描述符，添加或者删除所有待监控的连接)3.返回的活跃连接 ==epoll_wait（ epoll描述符 ） 与select相比，epoll分清了频繁调用和不频繁调用的操作。例如，epoll_ctrl是不太频繁调用的，而epoll_wait是非常频繁调用的。这时，epoll_wait却几乎没有入参，这比select的效率高出一大截，而且，它也不会随着并发连接的增加使得入参越发多起来，导致内核执行效率下降。 epoll三大关键要素：mmap、红黑树、链表mmap映射区将内核的一个地址与用户空间的一个地址映射到同一块物理内存地址，减少用户态和内核态之间的数据交换。内核可以直接看到用户空间epoll监听的句柄，效率高；对于要监听的socket，epoll采用红黑树进行存储，添加或者删除epoll都是对红黑树进行操作，所以效率较高，时间复杂度为O（logn）；epoll将添加进来的新事件存储到红黑树上，所以不会出现重复添加，对于已经就绪的事件采用双向链表来存储，同时建立回调机制，每当有新的事件被触发，就会执行回调函数，该回调函数在内核中被称为：ep_poll_callback,把相应的事件添加到双向链表中，然后将其复制到用户空间（相对于select、poll需要将所有文件描述符从内核复制到用户空间，epoll只需要将就绪的文件描述符及其事件进行复制即可，效率得到极大提升）。 &gt; epoll_wait的工作流程： 1.epoll_wait调用ep_poll，当rdlist为空（无就绪fd）时挂起当前进程，直到rdlist不空时进程才被唤醒.2.文件fd状态改变（buffer由不可读变为可读或由不可写变为可写），导致相应fd上的回调函数ep_poll_callback()被调用。3.ep_poll_callback将相应fd对应epitem加入rdlist，导致rdlist不空，进程被唤醒，epoll_wait得以继续执行。4.ep_events_transfer函数将rdlist中的epitem拷贝到txlist中，并将rdlist清空。5.ep_send_events函数（很关键），它扫描txlist中的每个epitem，调用其关联fd对用的poll方法。此时对poll的调用仅仅是取得fd上较新的events（防止之前events被更新），之后将取得的events和相应的fd发送到用户空间（封装在struct epoll_event，从epoll_wait返回）。之后如果这个epitem对应的fd是LT模式监听且取得的events是用户所关心的，则将其重新加入回rdlist，否则（ET模式）不在加入rdlist。 epoll的使用int epoll_create(int size);int epoll_ctl ( int epfd, int op, int fd, struct epoll_event event );int epoll_wait ( int epfd, struct epoll_event events, int maxevents, int timeout ); 函数说明： fd：要操作的文件描述符 op：指定操作类型操作类型： EPOLL_CTL_ADD：往事件表中注册fd上的事件 EPOLL_CTL_MOD：修改fd上的注册事件 EPOLL_CTL_DEL：删除fd上的注册事件 event：指定事件，它是epoll_event结构指针类型 struct epoll_event{ __unit32_t events; // epoll事件 epoll_data_t data; // 用户数据}; typedef union epoll_data { void* ptr; //指定与fd相关的用户数据 int fd; //指定事件所从属的目标文件描述符 uint32_t u32; uint64_t u64;} epoll_data_t; epoll_wait函数说明： 返回：成功时返回就绪的文件描述符的个数，失败时返回-1并设置errno timeout：指定epoll的超时时间，单位是毫秒。当timeout为-1是，epoll_wait调用将永远阻塞，直到某个时间发生。当timeout为0 时,epoll_wait调用将立即返回。 maxevents：指定最多监听多少个事件 events：检测到事件，将所有就绪的事件从内核事件表中复制到它的第二个参数events指向的数组中。 &gt;关于epoll LT和ET触发二者区别在此处仅做简单总结，具体代码测试可参见后面链接中博客：1.LT:在边沿触发模式下，对于读事件1.当buffer由不可读状态变为可读的时候，即由空变为不空的时候2.当有新数据到达时，即buffer中的待读内容变多的时候3.当buffer中有数据可读（即buffer不空）且用户对相应fd进行epoll_mod IN事件时候对于写事件1.当buffer由不可写变为可写的时候，即由满状态变为不满状态的时候2.当有旧数据被发送走时，即buffer中待写的内容变少的时候3.当buffer中有可写空间（即buffer不满）且用户对相应fd进行epoll_mod OUT事件时候 2.ET:在边沿触发模式下，对于读事件，buffer中有数据可读的时候，即buffer不空的时候fd的events的可读为就置1，buffer中有空间可写的时候，即buffer不满的时候fd的events的可写位就置1。关于ET模式下的accept问题，如果设置为ET模式，如果在内核缓冲区中一次读取到很多连接请求，但由于ET模式，所以只会触发一次epoll，就会出现我们只做一次accept处理后，就无法读取后续连接，对于这个问题，可以通过在while循环中一直accept直到将缓冲区中请求全部处理完成后，accept就会返回-1,退出循环，同时缓冲区由满变空，之后有新的请求到来的时候，就会触发epoll 请参考http://blog.chinaunix.net/uid-28541347-id-4273856.htmlhttp://www.cnblogs.com/lojunren/p/3856290.html","categories":[],"tags":[]},{"title":"C++关联容器及其底层实现","slug":"C++关联容器及其底层实现","date":"2017-08-10T09:03:13.380Z","updated":"2017-08-10T12:17:00.403Z","comments":true,"path":"2017/08/10/C++关联容器及其底层实现/","link":"","permalink":"http://yoursite.com/2017/08/10/C++关联容器及其底层实现/","excerpt":"","text":"map、set","categories":[],"tags":[]},{"title":"各种需要记忆的小Tips","slug":"各种需要记忆的小Tips","date":"2017-08-09T09:04:58.260Z","updated":"2017-08-09T13:03:40.060Z","comments":true,"path":"2017/08/09/各种需要记忆的小Tips/","link":"","permalink":"http://yoursite.com/2017/08/09/各种需要记忆的小Tips/","excerpt":"","text":"大小端字节序：大端字节序：高位字节在低地址，低位字节在高地址 又称网络字节序（最高位在左边，记为0bit，最低位在右边，记为31bit）小端字节序：低位字节在低地址，高位字节在高地址 每个网络维护一个路由表，而不是每个主机；所以Internet上的路由器只有几千个，而不是等同于主机数量 ARP、RARP本质上属于数据链路层的协议，但是二者与IP协议相同，具有相应的以太网帧数据类型；ICMP、ICGP本质上属于网络层的协议，是IP协议的附属协议，但二者又被封装在IP数据报中","categories":[],"tags":[]},{"title":"写在开头","slug":"写在开头","date":"2017-08-05T07:44:54.946Z","updated":"2017-08-05T07:45:04.587Z","comments":true,"path":"2017/08/05/写在开头/","link":"","permalink":"http://yoursite.com/2017/08/05/写在开头/","excerpt":"","text":"从腾讯云把家搬到了Github Pages，域名备案了两个月也终于通过了审核，以后就要在这里记录自己的学习和生活啦! 为什么要写博客？ 也不知道为啥，总感觉现在记忆力越来越差了，看过的知识、做过的项目感觉很快就忘得差不多了，很担心某天早晨醒来，连自己名字都记不到了，所以就有了自己写博客的想法，把自己看过的、做过的用博客的形式做一个记录。 目前还是学生，很多东西学得也不深，认真去写一个博客也可以强迫自己去查一些资料，同时写博客的过程也是一个梳理、总结、再思考的过程。 再者，马上就要全面进入校招季了，很多看过的知识、简历上的项目、面试有可能会问到的东西都需要一个平台进行总结。 所以，just do it！！！","categories":[],"tags":[]},{"title":"TCP/IP全总结","slug":"TCPIP协议族全总结","date":"2017-08-04T02:23:54.826Z","updated":"2017-08-08T13:07:30.909Z","comments":true,"path":"2017/08/04/TCPIP协议族全总结/","link":"","permalink":"http://yoursite.com/2017/08/04/TCPIP协议族全总结/","excerpt":"","text":"马上要有一大波面试了，所以趁着还有时间把面试需要的几块知识做一个完整的总结，主要分为以下几个部分：TCP/IP,操作系统，C++基础，数据库基础。本博为第一部分，关于TCP/IP的总结。 (一) TCP/IP协议基础TCP/IP不是一个协议，而是一个协议族的统称。里面包含了几个分层的协议，比如网络层的IP协议，传输层的TCP、UDP协议、应用层的http、ftp等协议。首先就要明白TCP/IP协议族的分层，提到分层，我们很容易想到的是OSI七层协议经典架构，为了方便记忆，也可以进行口诀记忆，“物数网传会表应”，但是TCP/IP的分层稍有不同，只分为四层，从上到下依次为应用层、传输层、网络层、数据链路层。简单介绍一下各层，最上面的应用层，里面有http、ftp等协议，再往下为传输层，里面主要有tcp、udp协议，第三层为网络层，IP协议就在这一层，它负责对数据加上IP地址及其它数据以确定发送的目标，最底层为数据链路层，这个层次的定义包括了网线的制式，网卡的定义等；发送协议的主机将数据逐层往下层层封装，而接受数据的主机则按照协议从得到的数据包解开，最终拿到需要的数据。 一些基本的常识： 互联网IP地址：网络上每个设备节点都必须有一个独立的IP地址，现在通用的IP地址是一个32bit的数字，也就是IPV4标准，将32bit的数字分成4组，也就是常见的255.255.255.255的样式。IPV4标准下，地址被分为五类，我们常用的是B类地址。对用到操作系统,IP地址+端口号对应操作系统的一个进程。 域名系统：域名系统是一个分布式的数据库，DNS即是把域名即网址转换成IP地址的服务。 (二) 数据链路层数据链路层有3个目的： 为IP模块发送和接受IP数据报 为ARP模块发送ARP请求和接受ARP应答 为RARP模块发送RARP请求和接受RARP应答 关于ARP和RARP，ARP叫做地址解析协议，是IP地址与MAC地址转换的协议，而RARP则叫做逆地址解析协议（后面会有详细介绍）。数据链路层还有很多其他的协议，比如我们常用的以太网帧协议，也有不太常见的令牌环,还有FDDI，国内常见的PPP协议(ADSL宽带)，还有loopback协议等。 由于cmd markdown编辑器贴图还要会员功能，所以我把ifconfig的结果，复制成文字如下所示： 1.eth0 Link encap:Ethernet HWaddr 00:01:4A:03:5B:ED2.inet addr:192.168.11.2 Bcast:192.168.11.255 Mask:255.255.255.03.inet6 addr: fe80::201:4aff:fe03:5bed/64 Scope:Link4.UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:15.RX packets:2819 errors:0 dropped:0 overruns:0 frame:06.TX packets:76 errors:0 dropped:0 overruns:0 carrier:07.collisions:0 txqueuelen:10008.RX bytes:241609 (235.9 KiB) TX bytes:9596 (9.3 KiB)9.lo Link encap:Local Loopback10.inet addr:127.0.0.1 Mask:255.0.0.011.inet6 addr: ::1/128 Scope:Host12.UP LOOPBACK RUNNING MTU:16436 Metric:113.RX packets:2713 errors:0 dropped:0 overruns:0 frame:014.TX packets:2713 errors:0 dropped:0 overruns:0 carrier:015.collisions:0 txqueuelen:016.RX bytes:3516032 (3.3 MiB) TX bytes:3516032 (3.3 MiB) 其中,第一行eth0（如果一台PC上有多个网卡，则会有多个），后面是mac地址（对应网卡）；第二行网络的ip、子网、掩码（后面会有介绍）；第三行表示对应IPv6地址；第四行表示状态，UP表示网卡已经启用，BROADCAST表示支持广播，RUNNING表示网卡正在运行，后面依次为支持多播、最大传输单元、度量值（用于估算路由）；第五行依次表示接受的正确数据包数、错误数据报数、丢弃的数据包数；第六行同第五行；第八行表示接受和发送的字节数；第十行表示主机的回环地址（这个一般是用来测试一个网络程序，但又不想让局域网或外网的用户能够查看，只能在此台主机上运行和查看所用的网络接口）； 每一种数据链路层协议都有MTU（最大传输单元）的限制，在这个定义下，如果IP数据报过大，就要进行分片，使得每片都小于MTU；可以用netstat -in打印出MTU的结果；下图中上面为以太网，下面为loopback Kernel Interface tableIface MTU Met RX-OK RX-ERR RX-DRP RX-OV TX-OK TX-ERR TX-DRP TX-OVReth0 1500 0 1774 0 0 0 587 0 0 0lo 16436 0 2667 0 0 0 2667 0 0 0 (三) IP协议、ARP协议、RARP协议在网络层，我们主要讲这三个协议，ARP协议主要用来找到目标主机的以太网MAC地址；RARP主要用来通过MAC地址确认IP地址；IP主要用来传载消息；对于数据链路层与网络层之间的关系，数据链路层通过ARP来获得数据的传达信息，通过IP来获得要传输的数据信息。 IP协议1. 简介IP协议以数据报形式进行传输，为上层提供无状态、无连接、不可靠的服务。无连接表示的是IP通信双方都不需要长时间保持连接状态，只需要在传输时，确定目标IP地址；无状态表示的是双方不同步传输数据的状态，每一个IP数据报都是相互独立的，有可能出现重复或者顺序颠倒等，接收端只要接收到完整的IP数据报（如果有分片就先充足），就将数据报交给上层协议，在上层协议看来，这些数据报就是乱的，如果是面向连接的上层协议，如TCP，就能够自己处理这些乱序的数据报，保证传输到应用层的是有序、可靠的数据；不可靠是指IP数据报不保证一定能够达到目的地，很多情况都会导致IP数据报发送失败。 2. IP协议头部IP协议包含至少20字节的头部信息，分为1-4字节（4位版本号、4位首部长度、8位服务类型，16位总长度）；5-8字节（16位标识，3位标志，13位片偏移（分片相对原始IP数据报的偏移））；9-12字节（8位生存时间（从源主机到达目标主机经过的路由跳数上限）、8位协议（用于区分上层协议）、16位首部检验和）；13-16（源IP地址）；17-20（目的IP地址）。 3. IP分片 前面提到了，当IP数据报的长度超过以太网帧的MTU时，就会分片传输，分片可能发生在IP数据报传输的任意过程中，包括发送端、中转路由、目标主机等，但只有在目标主机上，才回将分片的IP数据报进行重组。IP协议头的5-8字节为分片和重组提供了足够的信息，如果发生了分片，那么来自同一IP数据报的分片都有相同的16位标识，但他们的13位片偏移不同，并且除了最后一片分片，其余分片都设置MF标志。 4. IP路由IP协议的一个核心任务是数据报的路由，即决定发送数据报到目标主机的路径。可参考linux高性能服务器编程图2-3，当主机接收到对方的以太网帧时，去掉以太网帧头帧尾，得到IP数据报，首先对该数据报的头部做CRC校验，确认无误之后开始分析IP数据报头部信息。如果IP数据报头部设置了源站选路选项，则IP模块调用数据报转发子模块处理该数据报。如果该IP数据报的头部目标IP地址是本机的某个IP地址，或者是广播地址，那么该数据报就是发给本机的，则IP模块就根据9-12字节的8位协议决定分发给哪个上层应用。如果IP模块发现这个数据报不是发送给本机的，那么就调用数据报转发子模块处理该数据报。（需要检测是否允许转发，IP头部中有该部分信息）。数据转发发至哪一跳路由（或者目标机器），以及经过哪个网卡来发送就是IP路由过程。IP模块实现数据报路由的核心数据转发的结构就是路由表。这个表按照数据报的目标IP地址分类，同一类型的IP数据报将被发往相同的下一跳路由。可以通过route命令看到路由表信息。如下图：图中依次为目标地址，网关地址，网络掩码，路由项标志，路由距离，最后一项为路由项对应的输出网卡接口。（图中*表示目标和本机在同一个网络中，不需要进行IP路由）每个主机都维护一个路由表，首先，检测TTL，路由中转跳数是否已到，当接收到的IP数据报目标IP地址与路由表中Destination相符时，表明该IP数据报是可以直接发送给目标机器的，不需要经过路由；如果没有相符，那么匹配子网的路由器(子网掩码)；如果没有相符，那么匹配同网号的路由器；如果都失败了，那么搜索默认路由，需要通过网关来转发（网关：网关是具有路由功能的设备的IP地址，每个网络都有自己的网关，当两个IP不在同一个网络时，就需要通过各自的网关进行数据传输）；如果默认路由不存在，那么丢弃这个IP数据包。 * 子网寻址IP地址是有网络号+子网号+主机号组成的，比如一个B类IP地址：210.30.109.134, 210.30就是网络号；109就是子网号；134表示主机号；子网掩码中的1对应原IP地址中的网络号加上子网号，0对应主机号；子网掩码与IP地址进行逐位“与”运算，就可以得出网络地址。 #####* 路由表更新 * 手动设置（静态更新）在ernest-laptop的linux下，sudo route add -host 192.168.1.109 dev eth0sudo route del -net 192.168.1.0 netmask 255.255.255.0sudo route del defaultsudo route add default gw 192.168.1.109 dev eth0第一行表示添加192.168.1.109对应的路由项，这样所有从ernest-laptop发送到Kongming20的IP数据报将通过网卡eth0直接发送至目标机器的接受网卡；第二行表示删除192.168.1.0对应的路由项，这样就无法发送至192.168.1.0局域网下的所有主机；第三行表示删除default对应的路由项，这样就无法发送至广域网第四行表示重新设置默认路由项，不过这次网关设置为Kongming20 * 动态更新对于大型的路由器，通常通过BGP、RIP、OSPF等协议来发现路径，并更新路由表。unix系统上面通常都有路由守护程序，–routed。还有一个叫做gate。gate支持的协议较多，gate支持RIPv1、v2，BGPv1等。 ARP协议ARP协议能够实现任意网络层地址到任意物理地址的转换，不过我们在此仅仅讨论IP地址到MAC地址的转换。我们知道每个网卡对应一个MAC地址，那么IP地址数据报是如何对应到MAC的呢？以太网ARP请求、应答报文格式如下：硬件类型表示物理层的地址类型，1表示mac地址；协议类型表示上层协议，0x080表示IP协议。ARP协议是一种解析协议，每个主机也会维护一个IP-ARP地址对应缓存表，之前对应过的二者都会放在这个缓存表里，如果在这个缓存表中，没有查询到对应的IP地址，那么主机就向自己所在网络发送一个ARP协议包，接到这个协议包的主机都会查询自己的IP是否对应，如果对应，那么就准备好一个包含自己MAC地址的ARP包传回至发送ARP广播的主机，那么发送的主机就会更新自己的ARP协议包，发送广播的主机就会用新的ARP协议包得到对应的MAC地址来封装以太网帧。 (四) ICMP协议，ping和TracerootICMP协议IP协议并不是一个可靠的协议，不保证数据传达，ICMP可以在数据不能传达的情况下做出一些补充，ICMP也是位于网络层的协议；具体如下：当IP数据包发生错误：比如主机不可达、路由不可达时，ICMP协议将会把错误信息封包，然后传送回主机。给主机一个处理错误的机会，ICMP数据包由8位的错误类型和8位的代码和16位的校验和组成。8bits类型和8bits代码字段一起决定了ICMP报文的类型。常见的有：类型8、代码0（回射请求），类型0、代码0（回射应答），类型11、代码0（超时）等。 ICMP协议大致分为两类，一种是查询报文；一种是差错报文。（其中查询报文一般有以下几种用途：ping查询，子网掩码查询，时间戳查询；差错报文则产生在数据传送发生错误的时候） ping原理ping结果：Reply from 10.4.24.1: bytes=32 time&lt;1ms TTL=255Reply from 10.4.24.1: bytes=32 time&lt;1ms TTL=255Reply from 10.4.24.1: bytes=32 time&lt;1ms TTL=255Reply from 10.4.24.1: bytes=32 time&lt;1ms TTL=255 Ping statistics for 10.4.24.1: Packets: Sent = 4, Received = 4, Lost = 0 (0% loss),Approximate round trip times in milli-seconds: Minimum = 0ms, Maximum = 0ms, Average = 0ms ping主要利用ICMP协议包来侦测另一个主机是否可达，ping程序主要是通过向目标主机发送类型8、代码0的ICMP报文，如果对方主机可达，就会收到类型0、代码0的ICMP数据包（回射应答），如果不可达，则返回错误信息。time可以大致了解网速，TTL表明经过多少次路由到达，也可以看出有多少包被送达。 traceroute原理traceroute主要用来侦测主机之间的路由情况，traceroute原理非常简单，首先给目的主机发送一个TTL=1的UDP数据包，经过的第一个路由收到这个数据包以后，就自动把TTL减一，而TTL变为0以后，路由器就把这个包抛弃，返回一个ICMP数据报给主机；主机在收到这个包之后就会继续发一个TTL=2的数据报过去，如此，就可以拿到所有路由的ip (四) TCP、UDPTCP协议TCP协议属于传输层协议，相对于UDP三个特点：面向连接、可靠地流式协议；使用TCP协议通信的双方必须先建立连接，然后才能开始数据读写。保持连接需要耗费系统资源。TCP协议的连接是1对1的，所以基于广播和多播的应用程序不能使用TCP服务，而无连接的UDP非常适合于广播和多播。可靠主要体现在两个机制：超时重传、接收确认和滑动窗口，发送端的每个报文段都必须得到接收方的应答，才认为这个TCP报文段传输成功，发送端在发送报文之后开启定时器，如果在定时时间内未收到应答，重发该报文段。关于字节流和数据报区别：字节流发送端执行的写操作字数和接收端执行的读操作次数没有任何数量关系；数据报则不然，发送端每执行一次写操作，UDP模块就将其封装成一个数据报发送。 1. TCP头部信息 1-4字节（16位源端口号和16位目的端口号）、5-8字节（32位序号（初始化的ISN+字节偏移））、9-12字节（32确认号（对收到的报文段序号加1））、13-16字节（4位头部长度（最长60字节）、6位保留、6位标志位、16位窗口大小（告诉对方本端的TCP接收缓冲区还能容纳多少字节数据，进而控制发送速度））、17-20（16位校验和 16位紧急指针），此外还有最多40字节的保留选项 6位标志位：URG、ACK、PSH、RST（要求对方重新建立连接、复位报文）、SYN、FIN 2. TCP的连接和关闭 之前面试被问到为什么三次握手？而不能是两次或四次？如果改成两次，会存在这样一种情况：client发送的SYN报文段可能由于某种原因在网络中长时间滞留，由于超时重传，可能已经新的连接建立之后已经关闭了，这时候滞留的SYN报文段发过来，如果只是两次握手，server端会回应ACK，server端就会以为已经建立了连接，这样就会导致资源的浪费，而采用三次握手会有client的再次确认，就可以避免这种现象。四次握手就会出现资源的浪费。四次挥手为什么不能像三次握手一样把ack与server端的FIN合并为一条报文？实际上，仅用于确认目的的报文段5是可以省略的，报文段5是否存在取决于TCP的延迟确认特性 半关闭状态 TCP连接是全双工的，允许两个方向的数据传输被独立关闭。发送端发送FIN收到接受端确认，发送端即进入半关闭状态。 3. TCP状态转移 client:CLOSED-&gt;SYN_SEND-&gt;ESTABLISHED-&gt;FIN_WAIT1-&gt;FIN_WAIT2-&gt;TIMEWAIT-&gt;CLSOED server:CLOSED-&gt;SYN_RECVD-&gt;ESTABLISHED-&gt;CLOSE_WAIT-&gt;LAST_ACK-&gt;CLOSED 需要注意的是client主动关闭时，发送FIN时进入FIN_WAIT1状态，收到ACK，进入FIN_WAIT2状态，收到FIN,发送ACK后进入TIME_WAIT状态，等待2MSL(报文段最大生存时间，建议为2min)后，进入CLOSED。 关于TIME_WAIT状态存在的原因： 1.可靠的终止TCP连接 因为如果对方没有收到最后的ACK，那么TIME_WAIT的等待时间内会继续收到对方的FIN，收到之后会重新发ACK过去，这样就可以保证在ACK丢失的情况下仍然可靠终止TCP连接 2.在linux下，同一个IP+端口是不能被打开2次及以上的，如果不存在TIME_WAIT状态，那么就可以在新的IP+端口上建立TCP连接，这样就有可能把原有的TCP数据（迟到的）接收过来，这样显然是不合适的 与socket编程结合server: socket、bind、listen","categories":[],"tags":[]}]}